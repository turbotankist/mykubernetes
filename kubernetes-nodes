/etc/systemd/network/10-static.network

[Match]
Name=eth1

[Network]
Address=192.168.0.5/24


#---------------------------------------------------

sudo mkdir -p /etc/kubernetes/ssl
sudo cp /home/core/* /etc/kubernetes/ssl

/etc/kubernetes/ssl/ca.pem
/etc/kubernetes/ssl/node1-worker.pem
/etc/kubernetes/ssl/node1-worker-key.pem

sudo chmod 600 /etc/kubernetes/ssl/*-key.pem
sudo chown root:root /etc/kubernetes/ssl/*-key.pem

cd /etc/kubernetes/ssl/
sudo ln -s node1-worker.pem worker.pem
sudo ln -s node1-worker-key.pem worker-key.pem

#------------------------------------------------------
 sudo mkdir -p /etc/flannel/ 
sudo bash -c "cat > /etc/flannel/options.env <<__EOF__
FLANNELD_IFACE=eth1
FLANNELD_ETCD_ENDPOINTS=http://192.168.0.2:2379,http://192.168.0.3:2379,http://192.168.0.4:2379
__EOF__"

sudo mkdir -p /etc/systemd/system/flanneld.service.d
sudo bash -c "cat > /etc/systemd/system/flanneld.service.d/40-ExecStartPre-symlink.conf <<__EOF__
[Service]
ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
__EOF__"

sudo mkdir -p /etc/systemd/system/docker.service.d/
sudo bash -c "cat > /etc/systemd/system/docker.service.d/40-flannel.conf <<__EOF__
[Unit]
Requires=flanneld.service
After=flanneld.service
[Service]
EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
__EOF__"

sudo mkdir -p /etc/kubernetes/cni/net.d
sudo bash -c "cat > /etc/kubernetes/cni/docker_opts_cni.env <<__EOF__
DOCKER_OPT_BIP=""
DOCKER_OPT_IPMASQ=""
__EOF__"

sudo bash -c 'cat > /etc/kubernetes/cni/net.d/10-flannel.conf <<__EOF__
{
    "name": "podnet",
    "type": "flannel",
    "delegate": {
        "isDefaultGateway": true
    }
}
__EOF__'

#----------------------------
sudo mkdir /etc/kubernetes/manifests

#-----kubelet----------
sudo bash -c 'cat > /etc/systemd/system/kubelet.service <<__EOF__
[Service]
Environment=KUBELET_IMAGE_TAG=v1.6.6_coreos.1
Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
  --volume dns,kind=host,source=/etc/resolv.conf \
  --mount volume=dns,target=/etc/resolv.conf \
  --volume var-log,kind=host,source=/var/log \
  --mount volume=var-log,target=/var/log"
ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
ExecStartPre=/usr/bin/mkdir -p /var/log/containers
ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
ExecStart=/usr/lib/coreos/kubelet-wrapper \
  --api-servers=https://192.168.0.2 \
  --cni-conf-dir=/etc/kubernetes/cni/net.d \
  --network-plugin=cni \
  --container-runtime=docker \
  --register-node=true \
  --allow-privileged=true \
  --pod-manifest-path=/etc/kubernetes/manifests \
  --hostname-override=192.168.0.8 \
  --cluster_dns=10.254.0.100 \
  --cluster_domain=cluster.local \
  --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
  --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
  --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem
ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
__EOF__'

#----------------------------
sudo bash -c "cat > /etc/kubernetes/manifests/kube-proxy.yaml <<__EOF__
apiVersion: v1
kind: Pod
metadata:
  name: kube-proxy
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-proxy
    image: quay.io/coreos/hyperkube:v1.6.6_coreos.1
    command:
    - /hyperkube
    - proxy
    - --master=https://192.168.0.2
    - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /etc/ssl/certs
      name: "ssl-certs"
    - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
      name: "kubeconfig"
      readOnly: true
    - mountPath: /etc/kubernetes/ssl
      name: "etc-kube-ssl"
      readOnly: true
  volumes:
  - name: "ssl-certs"
    hostPath:
      path: "/usr/share/ca-certificates"
  - name: "kubeconfig"
    hostPath:
      path: "/etc/kubernetes/worker-kubeconfig.yaml"
  - name: "etc-kube-ssl"
    hostPath:
      path: "/etc/kubernetes/ssl"
__EOF__"
#-------------------------

sudo bash -c "cat > /etc/kubernetes/worker-kubeconfig.yaml <<__EOF__
apiVersion: v1
kind: Config
clusters:
- name: local
  cluster:
    certificate-authority: /etc/kubernetes/ssl/ca.pem
users:
- name: kubelet
  user:
    client-certificate: /etc/kubernetes/ssl/worker.pem
    client-key: /etc/kubernetes/ssl/worker-key.pem
contexts:
- context:
    cluster: local
    user: kubelet
  name: kubelet-context
current-context: kubelet-context

__EOF__"

#------------------

sudo systemctl daemon-reload

sudo systemctl start flanneld
sudo systemctl enable flanneld

sudo systemctl start docker
sudo systemctl enable docker

sudo systemctl enable kubelet